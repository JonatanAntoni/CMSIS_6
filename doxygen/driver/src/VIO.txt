/**
\defgroup vio_interface_gr VIO
\brief API for Virtual I/O (VIO) (%cmsis_vio.h)
\details 

The VIO software component is a virtual I/O abstraction for peripherals that are typically used in example projects.

<b>VIO API</b>

The following header file defines the Application Programming Interface (API) for VIO:
  - \b %cmsis_vio.h : API for VIO

<b>VIO User Code Templates</b>

The VIO software component contains two user code templates wit different purposes:
  - VIO:Custom: This file is an empty stub with all functions that are defined in the header file that can be used to
    implement the VIO layer for the hardware that is used in the application.
  - VIO:Virtual:  This file uses a fixed memory location to emulate the VIO functionality and can be used off-the-shelf.

Both templates come with an SCVD file that is used to display the VIO signals in Component Viewer:

\image html vioComponentViewer.png

@{
*/

/**
\defgroup vioDefines_gr  Defines and Structs
\ingroup vio_interface_gr
\brief Documents the defines and structs of the VIO API.
\details
@{
    Test.
*/

/**
\defgroup vioSignals_gr  Signals
\ingroup vioDefines_gr
\brief Signal related defines.
\details
@{
\def vioLED0
\def vioLED1
\def vioLED2
\def vioLED3
\def vioLED4
\def vioLED5
\def vioLED6
\def vioLED7
\def vioLEDon
\def vioLEDoff
\def vioBUTTON0  
\def vioBUTTON1  
\def vioBUTTON2  
\def vioBUTTON3  
\def vioJOYup    
\def vioJOYdown  
\def vioJOYleft  
\def vioJOYright 
\def vioJOYselect
\def vioJOYall   
@}
*/

/**
\defgroup vioValues_gr  Values
\ingroup vioDefines_gr
\brief Value related defines.
\details
@{
\def vioAIN0 
\def vioAIN1 
\def vioAIN2 
\def vioAIN3 
\def vioAOUT0
/** 
\struct     vioValueXYZ_t
\details
Structure holding three-dimensional values for gyroscopes, accelerometers, etc.

<b>Parameter for:</b>
  - \ref vioGetXYZ
  - \ref vioSetXYZ
***************************************************************************************************************************/
@}
*/

/**
\defgroup vioIDs_gr  IDs
\ingroup vioDefines_gr
\brief ID related defines.
\details
@{
\def vioAIN0 
\def vioAIN1 
\def vioAIN2 
\def vioAIN3 
\def vioAOUT0
\def vioMotionGyro    
\def vioMotionAccelero
\def vioMotionMagneto 
@}
*/

/**
\defgroup vioPrintLevels_gr  Print Levels
\ingroup vioDefines_gr
\brief Print level related defines.
\details
@{
\def vioLevelNone   
\def vioLevelHeading
\def vioLevelMessage
\def vioLevelError
@}
*/

/**
\defgroup vioIPAddr_gr  IP Addresses
\ingroup vioDefines_gr
\brief IP address related structs.
\details
@{
\struct     vioAddrIPv4_t
\details
Structure holding IPv4 addresses.

<b>Parameter for:</b>
  - \ref vioGetIPv4
  - \ref vioSetIPv4

\struct     vioAddrIPv6_t
\details
Structure holding IPv6 addresses.

<b>Parameter for:</b>
  - \ref vioGetIPv6
  - \ref vioSetIPv6
@}
*/

/**
@}
*/
// end group vioDefines_gr



void vioInit (void) {};
/**
\fn void vioInit (void)
\details
The function \b vioInit initializes the VIO interface. Use it to initialize any connected hardware that is used to
map VIO signals. 

\b Code \b Example:
\code
void vioInit (void) {

  BSP_LED_Init(LED_BLUE);
  BSP_LED_Init(LED_RED);
  BSP_LED_Init(LED_GREEN);
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_GPIO);
}
\endcode
***************************************************************************************************************************/

int32_t vioPrint (uint32_t level, const char *format, ...) {
  return (0);
};
/**
\fn int32_t vioPrint (uint32_t level, const char *format, ...)
\details
The function \b vioPrint prints a formatted string to a test terminal. Formatting of the output follows the rulse od standard
C language printf().

Refer to \ref vioPrintLevels_gr for information about the possible \a levels.

\b Code \b Example:
\code
int32_t vioPrint (uint32_t level, const char *format, ...) {
  va_list args;
  int32_t ret = -1;
 
  if (level > vioLevelError) {
    return (-1);
  }
 
  if (level > CV_PRINTMEM_NUM) {
    return (-1);
  }
 
  va_start(args, format);
 
  ret = vsnprintf((char *)vioPrintMem[level], sizeof(vioPrintMem[level]), format, args);
 
  switch (level) {
    case vioLevelNone:
      GUI_SetFont(&Font12);
      GUI_SetTextColor(GUI_COLOR_WHITE);
      displayString (level, (char *)vioPrintMem[level]);
      break;
    case vioLevelHeading:
      GUI_SetFont(&Font16);
      GUI_SetTextColor(GUI_COLOR_GREEN);
      displayString (level, (char *)vioPrintMem[level]);
      break;
    case vioLevelMessage:
      GUI_SetFont(&Font12);
      GUI_SetTextColor(GUI_COLOR_BLUE);
      displayString (level, (char *)vioPrintMem[level]);
      break;
    case vioLevelError:
      GUI_SetFont(&Font12);
      GUI_SetTextColor(GUI_COLOR_RED);
      displayString (level, (char *)vioPrintMem[level]);
      break;
  }
      GUI_SetFont(&Font12);
      GUI_SetTextColor(GUI_COLOR_DARKBLUE);
 
  va_end(args);
 
  return (ret);
}
\endcode
***************************************************************************************************************************/

int32_t vioGetChar (void) {
  return (0);
};
/**
\fn int32_t vioGetChar (void)
\details
The function \b vioGetChar retrieves a charater from the test terminal. Use this function to get data for further processing
in your application.

\b Code \b Example:
\code
// todo
\endcode
***************************************************************************************************************************/

void vioSetSignal (uint32_t mask, uint32_t signal) {};
/**
\fn void vioSetSignal (uint32_t mask, uint32_t signal)
\details
The function \b vioSetSignal set a \a signal to an output specified by \a mask. Use this function to map VIOs to actual
hardware for displaying signals on a target board.

Refer to \ref vioSignals_gr for information about the possible \a mask and \a signal values.

\b Code \b Example:
\code
void vioSetSignal (uint32_t mask, uint32_t signal) {
  vioSignalOut &= ~mask;
  vioSignalOut |=  mask & signal;
 
  if (mask & vioLED0) {
    if (signal & vioLED0) {
      BSP_LED_On(LED_RED);
    } else {
      BSP_LED_Off(LED_RED);
    }
  }
 
  if (mask & vioLED1) {
    if (signal & vioLED1) {
      BSP_LED_On(LED_GREEN);
    } else {
      BSP_LED_Off(LED_GREEN);
    }
  }
 
  if (mask & vioLED2) {
    if (signal & vioLED2) {
      BSP_LED_On(LED_BLUE);
    } else {
      BSP_LED_Off(LED_BLUE);
    }
  }
  return;
}
\endcode
***************************************************************************************************************************/

uint32_t vioGetSignal (uint32_t mask) {
  return (0);
};
/**
\fn uint32_t vioGetSignal (uint32_t mask)
\details
The function \b vioGetSignal retrieves a signal from an input identified by \a mask. Use this function to read data from any
input that is provided.

Refer to \ref vioSignals_gr for information about the possible \a mask values.

\b Code \b Example:
\code
// todo
\endcode
***************************************************************************************************************************/

void vioSetValue (uint32_t id, int32_t value) {};
/**
\fn void vioSetValue (uint32_t id, int32_t value)
\details
The function \b vioSetValue set the \a value to the output identified by \a id. Use this function to set states of I/Os for
example.

Refer to \ref vioValues_gr for information about \a value and \ref vioIDs_gr for \a id.

\b Code \b Example:
\code
// todo
\endcode
***************************************************************************************************************************/

int32_t vioGetValue (uint32_t id) {
  return (0);
};
/**
\fn int32_t vioGetValue (uint32_t id)
\details
The function \b vioGetValue retrieves a value from the input identified by \a id. Use this function to read data from inputs.

Refer to \ref vioIDs_gr for information about \a id.

\b Code \b Example:
\code
// todo
\endcode
***************************************************************************************************************************/

void vioSetXYZ (uint32_t id, vioValueXYZ_t valueXYZ) {
  return (0);
};
/**
\fn void vioSetXYZ (uint32_t id, vioValueXYZ_t valueXYZ)
\details
The function \b vioSetXYZ sets a three-dimensional value \a valueXYZ to the output identified by \a id. Use this function to
apply a 3d value to an output.

Refer to \ref vioValues_gr for information about the \a valueXYZ and \ref vioIDs_gr for \a id.

\b Code \b Example:
\code
// todo
\endcode
***************************************************************************************************************************/

vioValueXYZ_t vioGetXYZ (uint32_t id) {
  return (0);
};
/**
\fn vioValueXYZ_t vioGetXYZ (uint32_t id)
\details
The function \b vioGetXYZ retrieves a three-dimensional value from the input identified by \a id. Use this function to get a
3d value.

Refer to \ref vioIDs_gr for information about \a id.

\b Code \b Example:
\code
vioValueXYZ_t vioGetXYZ (uint32_t id) {
  uint32_t index;
  vioValueXYZ_t valueXYZ = {0, 0, 0};
  BSP_MOTION_SENSOR_Axes_t axes;
 
  index = id;
  if (index >= CV_VALUE_NUM) {
    return valueXYZ;                   /* return default in case of out-of-range index */
  }
 
  if (index == 0U) {
    if (BSP_MOTION_SENSOR_GetAxes(0, MOTION_ACCELERO, &axes) == BSP_ERROR_NONE)
    {
      vioValueXYZ[index].X = axes.x;
      vioValueXYZ[index].Y = axes.y;
      vioValueXYZ[index].Z = axes.z;
    }
  }
 
  if (index == 1U) {
    if (BSP_MOTION_SENSOR_GetAxes(0, MOTION_GYRO, &axes) == BSP_ERROR_NONE)
    {
      vioValueXYZ[index].X = axes.x;
      vioValueXYZ[index].Y = axes.y;
      vioValueXYZ[index].Z = axes.z;
    }
  }
 
  valueXYZ = vioValueXYZ[index];
 
  return valueXYZ;
}
\endcode
***************************************************************************************************************************/

void vioSetIPv4 (uint32_t id, vioAddrIPv4_t addrIPv4) {};
/**
\fn void vioSetIPv4 (uint32_t id, vioAddrIPv4_t addrIPv4)
\details
The function \b vioSetIPv4 sets an IPv4 address specified by \a addrIPv4 to an interface identified by \a id. Use this
function to assign an IPv4 address to an interface.

Refer to \ref vioIDs_gr for information about \a id and \ref vioIPAddr_gr for \a addrIPv4.

\b Code \b Example:
\code
// todo
\endcode
***************************************************************************************************************************/

vioAddrIPv4_t vioGetIPv4 (uint32_t id) {
  return (0);
};
/**
\fn vioAddrIPv4_t vioGetIPv4 (uint32_t id)
\details
The function \b vioGetIPv4 retrieves the IPv4 addrIPv4 from an interface identified by \a id. Use this function to read an
IPv4 address.

Refer to \ref vioIDs_gr for information about \a id.

\b Code \b Example:
\code
// todo
\endcode
***************************************************************************************************************************/

void vioSetIPv6 (uint32_t id, vioAddrIPv6_t addrIPv6) {};
/**
\fn void vioSetIPv6 (uint32_t id, vioAddrIPv6_t addrIPv6)
\details
The function \b vioSetIPv6 sets an IPv6 address specified by \a addrIPv6 to an interface identified by \a id. Use this
function to assign an IPv6 address to an interface.

Refer to \ref vioIDs_gr for information about \a id and \ref vioIPAddr_gr for \a addrIPv6.

\b Code \b Example:
\code
// todo
\endcode
***************************************************************************************************************************/

vioAddrIPv6_t vioGetIPv6 (uint32_t id) {
  return (0);
};
/**
\fn vioAddrIPv6_t vioGetIPv6 (uint32_t id)
\details
The function \b vioGetIPv6 retrieves the IPv6 addrIPv6 from an interface identified by \a id. Use this function to read an
IPv6 address.

Refer to \ref vioIDs_gr for information about \a id.

\b Code \b Example:
\code
// todo
\endcode
***************************************************************************************************************************/

/**
@}
*/
// End VIO Interface
