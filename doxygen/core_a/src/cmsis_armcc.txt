/**************************************************************************//**
 * @file     cmsis_armcc.txt
 * @brief    CMSIS compiler specific macros, functions, instructions
 * @version  V1.00
 * @date     22. Feb 2017
 ******************************************************************************/
/* CMSIS compiler control architecture macros */
/**
\defgroup cc_macros Compiler Control
\brief Compiler agnostic \#define symbols for generic C/C++ source code
@{
\def __ARMCC_VERSION

\def __ARM_ARCH_7A__          
\def __ASM                   
\def __INLINE                
\def __STATIC_INLINE         
\def __STATIC_ASM            
\def __NO_RETURN             
\def __USED                  
\def __WEAK                  
\def __UNALIGNED_UINT32(x)   
\def __ALIGNED(x)            
\def __PACKED                
@}
*/

/* ###########################  Core Function Access  ########################### */
/** 
\defgroup CMSIS_Core_RegAccFunctions Core Register Access
\brief Functions to access the Cortex-A core registers
@{
*/

/**
\fn __STATIC_INLINE uint32_t __get_FPSCR(void)
\details 
Returns the current value of the Floating Point Status/Control register.

\fn __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
\details 
Assigns the given value to the Floating Point Status/Control register.
*/
/**
@} 
*/
/* end group CMSIS_Core_RegAccFunctions */

/* ##########################  Core Instruction Access  ######################### */
/** 
\defgroup CMSIS_Core_InstructionInterface Intrinsic Functions for CPU Instructions
\brief Functions that generate specific Cortex-A CPU Instructions
@{
*/

/**
\def __NOP                         
\details No Operation does nothing. This instruction can be used for code alignment purposes.


\def __WFI                         
\details Wait For Interrupt is a hint instruction that suspends execution until one of a number of events occurs.

\def __WFE                         
\details Wait For Event is a hint instruction that permits the processor to enter

\def __SEV                         
\details Send Event is a hint instruction. It causes an event to be signaled to the CPU.

\def __ISB()
\details Instruction Synchronization Barrier flushes the pipeline in the processor,
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.

\def __DSB()
\details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.

\def __DMB()
\details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.


\def __REV                             
\details Reverses the byte order in integer value.

\fn __attribute__((section(".rev16_text"))) __STATIC_INLINE __ASM uint32_t __REV16(uint32_t value)
\details Reverses the byte order in two unsigned short values.

\fn __STATIC_INLINE __ASM int32_t __REVSH(int32_t value)
\details Reverses the byte order in a signed short value with sign extension to integer.

\def __ROR         
\details Rotate Right (immediate) provides the value of the contents of a register rotated by a variable number of bits.

\def __BKPT(value) 
\details Causes the processor to enter Debug state.
           Debug tools can use this to investigate system state when the instruction at a particular address is reached.


\fn __STATIC_INLINE uint32_t __RBIT(uint32_t value)
\details 
	Reverses the bit order of the given value.

\def __CLZ                            
\details 
	Counts the number of leading zeros of a data value.

\fn __STATIC_INLINE uint32_t __get_CPSR(void)
\details
	This function returns the content of the CPSR Register.

\fn __STATIC_INLINE void __set_SP(uint32_t stack)
\details
    This function assigns the given value to the current stack pointer.

\fn __STATIC_ASM void __set_PSP(uint32_t topOfProcStack)
\details
    This function assigns the given value to the USR/SYS Stack Pointer (PSP).

\fn __STATIC_ASM void __set_CPS_USR(void)
\details
    This function changes the processor state to User Mode

\fn __STATIC_INLINE uint32_t __get_FPEXC(void)
\details
    This function returns the current value of the Floating Point Exception Control register.

\fn __STATIC_INLINE void __set_FPEXC(uint32_t fpexc)
\details
    This function assigns the given value to the Floating Point Exception Control register.

\fn __STATIC_INLINE uint32_t __get_CPACR(void)
\details
    This function returns the current value of the Coprocessor Access Control register.

\fn __STATIC_INLINE void __set_CPACR(uint32_t cpacr)
\details
    This function assigns the given value to the Coprocessor Access Control register.

\fn __STATIC_INLINE uint32_t __get_CBAR()
\details
    This function returns the value of the Configuration Base Address register.

\fn __STATIC_INLINE uint32_t __get_TTBR0() 
\details
    This function returns the value of the Translation Table Base Register 0.

\fn __STATIC_INLINE void __set_TTBR0(uint32_t ttbr0) 
\details
    This function assigns the given value to the Translation Table Base Register 0.

\fn __STATIC_INLINE uint32_t __get_DACR() 
\details
    This function returns the value of the Domain Access Control Register.

\fn __STATIC_INLINE void __set_DACR(uint32_t dacr) 
\details
    This function assigns the given value to the Domain Access Control Register.

\fn __STATIC_INLINE void __set_SCTLR(uint32_t sctlr)
\details
    This function assigns the given value to the System Control Register.

\fn __STATIC_INLINE uint32_t __get_SCTLR() 
\details
    This function returns the value of the System Control Register.

\fn __STATIC_INLINE void __set_ACTRL(uint32_t actrl)
\details
    This function assigns the given value to the Auxiliary Control Register.

\fn __STATIC_INLINE uint32_t __get_ACTRL(void)
\details
    This function returns the value of the Auxiliary Control Register.

\fn __STATIC_INLINE uint32_t __get_MPIDR(void)
\details
    This function returns the value of the Multiprocessor Affinity Register.

\fn __STATIC_INLINE uint32_t __get_VBAR(void)
\details
    This function returns the value of the Vector Base Address Register.

\fn __STATIC_INLINE void __set_VBAR(uint32_t vbar)
\details
    This function assigns the given value to the Vector Base Address Register.

\fn __STATIC_INLINE void __set_CNTP_TVAL(uint32_t value) 
\details
  This function assigns the given value to PL1 Physical Timer Value Register (CNTP_TVAL).

\fn __STATIC_INLINE uint32_t __get_CNTP_TVAL() 
\details
    This function returns the value of the PL1 Physical Timer Value Register (CNTP_TVAL).

\fn __STATIC_INLINE void __set_CNTP_CTL(uint32_t value) 
\details
  This function assigns the given value to PL1 Physical Timer Control Register (CNTP_CTL).

\fn __STATIC_INLINE void __set_TLBIALL(uint32_t value) 
\details

\fn __STATIC_INLINE void __set_BPIALL(uint32_t value)   
\details
  Branch Predictor Invalidate All

\fn __STATIC_INLINE void __set_ICIALLU(uint32_t value) 
\details
  Instruction Cache Invalidate All

\fn __STATIC_INLINE void __set_DCCMVAC(uint32_t value) 
\details
  Data cache clean

\fn __STATIC_INLINE void __set_DCIMVAC(uint32_t value) 
\details
  Data cache invalidate

\fn __STATIC_INLINE void __set_DCCIMVAC(uint32_t value) 
\details
  Data cache clean and invalidate

\fn __STATIC_ASM void __L1C_CleanInvalidateCache(uint32_t op) 
\details
  Generic mechanism for cleaning/invalidating the entire data or unified cache to the point of coherency.

\fn __STATIC_ASM void __FPU_Enable(void) 
\details
  Critical section, called from undef handler, so systick is disabled
*/

/** @}*/ 
/* end of group CMSIS_Core_InstructionInterface */


