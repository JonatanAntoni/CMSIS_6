/**************************************************************************//**
 * @file     cmsis_armcc.txt
 * @brief    CMSIS compiler specific macros, functions, instructions
 * @version  V1.00
 * @date     22. Feb 2017
 ******************************************************************************/
/* CMSIS compiler control architecture macros */
/**
\defgroup comp_cntrl_gr Compiler Control
\brief Compiler agnostic \#define symbols for generic C/C++ source code
\details
The CMSIS-Core provides the header file \b cmsis_compiler.h with consistent \#define symbols to generate C or C++ source files that should be compiler agnostic.
Each CMSIS compliant compiler should support the functionality described in this section.
@{
*/

/**
\def __ARMCC_VERSION
*/

/**
\def __ARM_ARCH_7A__    
\brief Set to 1 when generating code for ARMv7-A (Cortex-A7)
\details
The \b \#define __ARM_ARCH_7A__ is set to 1 when generating code for the ARMv7-A architecture. This architecture is for example used by the Cortex-A7 processor.
*/

/**      
\def __ASM           
\brief Pass information from the compiler to the assembler.
\details
The \b __ASM keyword can declare or define an embedded assembly function or incorporate inline assembly into a function
(shown in the code example below).
 
<b>Code Example:</b>
\code
// Reverse bit order of value
 
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;
 
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
   return(result);
}
\endcode
*/

/**        
\def __INLINE         
\brief Recommend that function should be inlined by the compiler.
\details
Inline functions offer a trade-off between code size and performance. By default, the compiler decides during optimization whether to
inline code or not. The \b __INLINE attribute gives the compiler an hint to inline this function. 
Still, the compiler may decide not to inline the function. As the function is global an callable function is also generated. 

<b> Code Example:</b>
\code
const uint32_t led_mask[] = {1U << 4, 1U << 5, 1U << 6, 1U << 7};
 
//------------------------------------------------------------------------------
// Switch on LEDs
//------------------------------------------------------------------------------
__INLINE static void LED_On (uint32_t led) {
 
  PTD->PCOR   = led_mask[led];
}
\endcode
*/

/**
\def __STATIC_INLINE  
\brief Define a static function should be inlined by the compiler.
\details
Defines a static function that may be inlined by the compiler. If the compiler generates inline code for 
all calls to this functions, no additional function implementation is generated which may further optimize space.

<b> Code Example:</b>
\code
__STATIC_INLINE uint32_t GIC_GetPriority(IRQn_Type IRQn)
{
  return((uint32_t)GICDistributor->D_IPRIORITYR[((uint32_t)(int32_t)IRQn)]);
}
\endcode
*/

/**  
\def __NO_RETURN             
\brief Inform the compiler that a function does not return.
\details
Informs the compiler that the function does not return. The compiler can then perform optimizations by
removing code that is never reached.
 
<b> Code Example:</b>
\code
// OS idle demon (running when no other thread is ready to run).
 
__NO_RETURN void os_idle_demon (void);
\endcode
*/

/**
\def __USED     
\brief Inform that a variable shall be retained in executable image.
\details
Definitions tagged with \b __USED in the source code should be not removed by the linker when detected as unused.
 
<b> Code Example:</b>
\code
// Export following variables for debugging 
__USED uint32_t const CMSIS_RTOS_API_Version = osCMSIS;
__USED uint32_t const CMSIS_RTOS_RTX_Version = osCMSIS_RTX;
__USED uint32_t const os_clockrate = OS_TICK;
__USED uint32_t const os_timernum  = 0;
\endcode
**/

/**             
\def __WEAK                  
\brief Export a function or variable weakly to allow overwrites.
\details
Functions defined with \b __WEAK export their symbols weakly. A function defined weak behaves like a normal defined
function unless a non-weak function with the same name is linked into the same image. If both a non-weak
function and a weak defined function exist in the same image, then all calls to the function resolve to the non-weak
function.

Functions declared with \b __WEAK and then defined without \b __WEAK behave as non-weak functions.
 
<b> Code Example:</b>
\code
__WEAK void SystemInit(void)
{
  SystemCoreSetup();
  SystemCoreClockSetup(); 
}
\endcode
*/

/**
\def __ALIGNED(x)  
\brief Minimum alignment for a variable.
\details
Specifies a minimum alignment for a variable or structure field, measured in bytes.
 
<b> Code Example:</b>
\code
uint32_t stack_space[0x100] __ALIGNED(8);   // 8-byte alignment required
\endcode
*/

/**
\def __PACKED   
\brief Request smallest possible alignment.
\details
Specifies that a type must have the smallest possible alignment.
 
<b> Code Example:</b>
\code
struct foo {
  uint8_t  u8;
  uint32_t u32[2] __PACKED;
};
\endcode
*/

/**
@}
*/
/* end group comp_cntrl_gr */

/* ###########################  Core Function Access  ########################### */
/** 
\defgroup core_reg_func_gr Core Register Access
\brief Functions to access the Cortex-A core registers
@{
*/

/**
\fn __STATIC_INLINE uint32_t __get_FPSCR(void)
\details 
  Returns the current value of the Floating Point Status/Control register.

\fn __STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
\details 
  Assigns the given value to the Floating Point Status/Control register.

\fn __STATIC_INLINE uint32_t __get_CPSR(void)
\details
	This function returns the content of the CPSR Register.
  
\fn __STATIC_INLINE void __set_CPSR(uint32_t cpsr)
\details
	This function assigns the given value to the CPSR Register.

\fn __STATIC_INLINE __ASM void __set_SP(uint32_t stack)
\details
  This function assigns the given value to the current stack pointer.

\fn __STATIC_INLINE __ASM void __set_SP_usr(uint32_t topOfProcStack)
\details
  This function assigns the given value to the USR/SYS Stack Pointer (PSP).

\fn __STATIC_INLINE uint32_t __get_FPEXC(void)
\details
  This function returns the current value of the Floating Point Exception Control register.

\fn __STATIC_INLINE void __set_FPEXC(uint32_t fpexc)
\details
  This function assigns the given value to the Floating Point Exception Control register.

\fn __STATIC_INLINE uint32_t __get_CPACR(void)
\details
  This function returns the current value of the Coprocessor Access Control register.

\fn __STATIC_INLINE void __set_CPACR(uint32_t cpacr)
\details
  This function assigns the given value to the Coprocessor Access Control register.

\fn __STATIC_INLINE uint32_t __get_CBAR()
\details
  This function returns the value of the Configuration Base Address register.

\fn __STATIC_INLINE uint32_t __get_TTBR0() 
\details
  This function returns the value of the Translation Table Base Register 0.

\fn __STATIC_INLINE void __set_TTBR0(uint32_t ttbr0) 
\details
  This function assigns the given value to the Translation Table Base Register 0.

\fn __STATIC_INLINE uint32_t __get_DACR() 
\details
  This function returns the value of the Domain Access Control Register.

\fn __STATIC_INLINE void __set_DACR(uint32_t dacr) 
\details
  This function assigns the given value to the Domain Access Control Register.

\fn __STATIC_INLINE void __set_SCTLR(uint32_t sctlr)
\details
  This function assigns the given value to the \ref CMSIS_SCTLR "System Control Register".

\fn __STATIC_INLINE uint32_t __get_SCTLR() 
\details
  This function returns the value of the System Control Register.

\fn __STATIC_INLINE void __set_ACTRL(uint32_t actrl)
\details
  This function assigns the given value to the Auxiliary Control Register.

\fn __STATIC_INLINE uint32_t __get_ACTRL(void)
\details
  This function returns the value of the Auxiliary Control Register.

\fn __STATIC_INLINE uint32_t __get_MPIDR(void)
\details
  This function returns the value of the Multiprocessor Affinity Register.

\fn __STATIC_INLINE uint32_t __get_VBAR(void)
\details
  This function returns the value of the Vector Base Address Register.

\fn __STATIC_INLINE void __set_VBAR(uint32_t vbar)
\details
  This function assigns the given value to the Vector Base Address Register.

\fn __STATIC_INLINE void __set_CNTP_TVAL(uint32_t value) 
\details
  This function assigns the given value to PL1 Physical Timer Value Register (CNTP_TVAL).

\fn __STATIC_INLINE uint32_t __get_CNTP_TVAL() 
\details
  This function returns the value of the PL1 Physical Timer Value Register (CNTP_TVAL).

\fn __STATIC_INLINE void __set_CNTP_CTL(uint32_t value) 
\details
  This function assigns the given value to PL1 Physical Timer Control Register (CNTP_CTL).

\fn __STATIC_INLINE void __set_TLBIALL(uint32_t value) 
\details

\fn __STATIC_INLINE void __set_BPIALL(uint32_t value)   
\details
  Write the provided value to the Branch Predictor Invalidate All (BPIALL) register.

\fn __STATIC_INLINE void __set_ICIALLU(uint32_t value) 
\details
  Instruction Cache Invalidate All

\fn __STATIC_INLINE void __set_DCCMVAC(uint32_t value) 
\details
  Data cache clean

\fn __STATIC_INLINE void __set_DCIMVAC(uint32_t value) 
\details
  Data cache invalidate

\fn __STATIC_INLINE void __set_DCCIMVAC(uint32_t value) 
\details
  Data cache clean and invalidate

*/
/**
@} 
*/
/* end group core_reg_func_gr */

/* ##########################  Core Instruction Access  ######################### */
/** 
\defgroup CMSIS_Core_InstructionInterface Intrinsic Functions for CPU Instructions
\brief Functions that generate specific Cortex-A CPU Instructions
@{
*/

/**
\def __NOP                         
\details No Operation does nothing. This instruction can be used for code alignment purposes.


\def __WFI                         
\details Wait For Interrupt is a hint instruction that suspends execution until one of a number of events occurs.

\def __WFE                         
\details Wait For Event is a hint instruction that permits the processor to enter

\def __SEV                         
\details Send Event is a hint instruction. It causes an event to be signaled to the CPU.

\def __ISB()
\details Instruction Synchronization Barrier flushes the pipeline in the processor,
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.

\def __DSB()
\details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.

\def __DMB()
\details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.


\def __REV                             
\details Reverses the byte order in integer value.
*/

/**
\details Reverses the byte order in two unsigned short values.
*/
/* leave definition here */ 
_STATIC_INLINE __ASM uint32_t __REV16(uint32_t value);

/**
\details Reverses the byte order in a signed short value with sign extension to integer.
*/
/* leave definition here */ 
\fn __STATIC_INLINE __ASM int32_t __REVSH(int32_t value);

/**
\def __ROR         
\details Rotate Right (immediate) provides the value of the contents of a register rotated by a variable number of bits.

\def __BKPT(value) 
\details Causes the processor to enter Debug state.
           Debug tools can use this to investigate system state when the instruction at a particular address is reached.


\fn __STATIC_INLINE uint32_t __RBIT(uint32_t value)
\details 
	Reverses the bit order of the given value.

\def __CLZ                            
\details 
	Counts the number of leading zeros of a data value.
*/

/** @}*/ 
/* end of group CMSIS_Core_InstructionInterface */


