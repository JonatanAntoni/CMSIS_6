/** \page CORE_MISRA_Exceptions_pg MISRA-C:2004 Compliance Exceptions
CMSIS-CORE uses the common coding rules for CMSIS components that are documented under 
<a href="../../General/html/index.html"><b>Introduction</b></a>.


CMSIS-CORE violates the following MISRA-C:2004 rules:
  
- Required Rule 8.5, object/function definition in header file.<br>
  Violated since function definitions in header files are used for function inlining'. 
   
- Advisory Rule 12.4, Side effects on right hand side of logical operator.<br>
  Violated because  volatile is used for core register definitions. 
   
- Advisory Rule 14.7, Return statement before end of function.<br>
  Violated to simplify code logic. 

- Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  Violated since unions are used for effective representation of core registers.
   
- Advisory Rule 19.4, Disallowed definition for macro.<br>
  Violated since macros are used for assembler keywords. 
   
- Advisory Rule 19.7, Function-like macro defined.<br>
  Violated since function-like macros are used to generate more efficient code. 
   
- Advisory Rule 19.16, all preprocessing directives must be valid.<br>
  Violated to set default settings for macros. 

  
&lt;device&gt;.h files generated by <b>SVDConv.exe</b> violate the following MISRA-C:2004 rules:

- Advisory Rule 20.2, Re-use of C90 identifier pattern.<br>
  Violated since CMSIS macros begin with '__'. Since CMSIS is developed and verified with various compilers this approach is acceptable and avoids conflicts with user symbols. 

- Advisory Rule 19.1, Declaration before \#include.<br>
  Violated since Interrupt Number Definition Type (IRQn_Type) must be defined before including the core header file. 
 */
   